<?php
/**
 * @file
 */

drupal_add_css(drupal_get_path('module', 'supporto_istanze') . '/' . 'stylesheet.css');

/**
 * Implements hook_views_api().
 */
function supporto_istanze_views_api()
{
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'supporto_istanze'),
  );
}

/**
 * Implements hook_permission().
 */
function supporto_istanze_permission() {
  return array(
    'amministra istanze' => array(
      'title' => 'Configurazione',
      'description' => 'Amministrare la configurazione del modulo',
    ),
    'protocollato' => array(
      'title' => 'Protocollo',
      'description' => 'Impostare o togliere il campo <em>Protocollo</em>',
    ),
    'visto' => array(
      'title' => 'Visto del DS',
      'description' => 'Visto del DS per la concessione di una istanza',
    ),
    'acquisito' => array(
      'title' => 'Istanza concedibile o acquisita',
      'description' => 'Controllare se una istanza può procedere nel suo iter',
    ),
  );
}

/**
 * Implements hook_theme().
 */
function supporto_istanze_theme($existing, $type, $theme, $path) {
  return array(
    'supporto_istanze_views' => array(
      'variables' => array(
        'content' => NULL,
        'assoc' => array(),
      ),
      'file' => 'supporto_istanze.theme.inc',
      'template' => 'supporto-istanze-views',
    ),
  );
}
/**
 * Implements hook_node_view().
 */
function supporto_istanze_node_view($node) {
  if (isset($node->content['field_si_acquisisci'])) {
    $node->content['field_si_acquisisci'] = NULL;
  }
  if (isset($node->content['field_si_email'])) {
    $node->content['field_si_email'] = NULL;
  }
}

function supporto_istanze_forms($form_id, $args) {
  $forms = array();
  if (!empty($args) && !empty($form_id) && strpos($form_id, 'supporto_istanze_form_') === 0) {
    $forms[$form_id] = array ('callback' => 'supporto_istanze_form');
  }
  return $forms;
}

function supporto_istanze_form_submit($form, $form_state) {
  $input = $form_state['values'];
  _supporto_istanze_save_selection($input);
}

function supporto_istanze_form($form, &$form_state, $sid, $uid, $tid, $checked, $field) {
  $form['user'] = array(
    '#type' => 'value',
    '#name' => 'user',
    '#value' => $uid,
  );
  $form['submission'] = array(
    '#type' => 'value',
    '#name' => 'submission',
    '#value' => $sid,
  );
  $form['tid'] = array(
    '#type' => 'value',
    '#name' => 'tid',
    '#value' => $tid,
  );
  $form['field'] = array(
    '#type' => 'value',
    '#name' => 'field',
    '#value' => $field,
  );
  $dest = current_path();
  if (!isset($_SESSION['si_dest'])) {
    if ($dest == '/system/ajax') {
      $dest = '/';
    }
    $_SESSION['si_dest'] = $dest;
  } else {
    $dest = $_SESSION['si_dest'];
  }
  $form['destination'] = array(
    '#type' => 'value',
    '#name' => 'destination',
    '#value' => $dest,
  );
  $form['is_ok'] = array(
    '#type' => 'checkbox',
    '#default_value' => $checked,
    '#ajax' => array(
      'callback' => 'supporto_istanze_form_callback',
//      'wrapper' => 'sid' . $sid,
      'progress' => array('type' => 'none'),
    ),
    '#attributes' => array(
//      'onclick' => 'this.form.submit()',
      'title' => 'Selezionare per cambiare lo stato',
    ),
  );
  $form['hidden_submit'] = array(
    '#type' => 'submit',
    '#value' => 'Invia',
    '#attributes' => array(
      'style' => 'display:none',
    ),
  );
  return $form;
}

function _supporto_istanze_get_nid_tid($sid, &$nid, &$tid) {
  $query = db_select('supporto_istanze', 't');
  $query->condition('submission_id', $sid,'=');
  $query->join('webform_submissions', 's', 't.submission_id = s.sid');
  $query->fields('t', array('tid'));
  $query->fields('s', array('nid'));
  $result = $query->execute();
  $array = $result->fetchAssoc();
  $nid = isset($array['nid']) ? $array['nid'] : 0;
  $tid = isset($array['tid']) ? $array['tid'] : 0;
}

function supporto_istanze_form_callback($form, $form_state) {
  if (!(user_access('protocollato'))) {
    return '---';
  }
  $input = $form_state['values'];
  if ($input['is_ok'] == 'on') {
    _supporto_istanze_delete_instances($input);
    $mode = "Cancellato";
  } else {
    _supporto_istanze_save_selection($input, FALSE);
    $mode = "Salvato";
  }
  $sid = $input['submission'];
  $nid = $tid = 0;
  _supporto_istanze_get_nid_tid($sid, $nid, $tid);
  $acquisisci = FALSE;
  $nodo = node_load($nid);
  if (isset($nodo->field_si_acquisisci['und'][0]['value']) && $nodo->field_si_acquisisci['und'][0]['value'] == 1) {
    $acquisisci = TRUE;
  }
  if (user_access('acquisito') && $input['is_ok'] != 'on') {
    $status = 'da valutare';
    $a = $input['destination'];
    $html = sprintf('<span id="sid%d"><a title=\'clic qui per valutare o modificare\' href=\'node/%d/submission/%d/istanza_%s/%d?destination=%s\'>%s</a></span>', $sid, $nid, $sid, $acquisisci? 'acquisisci' : 'concedi', $tid, $a, $status);
  }
  else {
    $html = sprintf('<span id="sid%d">---</span>', $sid);
  }
  drupal_set_message($mode . ' campo protocollo istanza ' . $sid);
  $commands = array();
  $commands[] = ajax_command_remove('div.messages');
  $commands[] = ajax_command_before('#main-content', theme('status_messages'));
  $commands[] = ajax_command_replace('#sid'.$sid, $html);
  return array('#type' => 'ajax', '#commands' => $commands);// $html;
}

function _supporto_istanze_check_email($nid) {
  $node = node_load($nid);
  if (!$node || !property_exists($node, 'field_si_email')) return false;
  if (!isset($node->field_si_email['und'])) return false;
  return $node->field_si_email['und'][0]['value']; 
}

function _supporto_istanze_email($params) {
  $params['user'] = user_load($params['uid']);
  $data = db_query('SELECT title, submitted, n.nid AS node_id FROM {webform_submissions} AS s LEFT JOIN {node} AS n ON (s.nid = n.nid) WHERE sid = :sid', array(':sid' => $params['submission']))->fetchAssoc();
  if (!empty($data)) {
    $params['nomenodo'] = $data['title'];
    $params['timestamp'] = $data['submitted'];
  }
  drupal_mail('supporto_istanze', 'notifica', $params['user']->mail, language_default(), $params);
  $segret = variable_get('supporto_istanze_email', '');
  if  (empty($segret)) {
    // @TODO: add warning message
    return; 
  }
  if (_supporto_istanze_check_email($data['node_id']) || $params['realfield'] == 'visto') {
    drupal_mail('supporto_istanze', 'segreteria', $segret, language_default(), $params);
  } 
}

function supporto_istanze_mail($key, &$message, $params) {
  $options = array(
    'langcode' => $message['language']->language,
  );
  $variables = array(
    '@nomesito' => variable_get('site_name', 'Drupal'),
    '@nome' => (empty($params['user']->field_cognome) || empty($params['user']->field_nome))? $params['user']->name : $params['user']->field_nome['und'][0]['value'] . ' ' .$params['user']->field_cognome['und'][0]['value'],
    '@istanza' => $params['nomenodo'],
    '@istanza_id' => $params['submission'],
    '@data' => format_date($params['timestamp'], 'custom', 'd/m/Y'),
    '@esito' => $params['is_ok'] == 1? 'accolta' : 'respinta',
    '@motivazioni' => $params['reasons'],
//    '@nome_dirigente' => variable_get('supporto_istanze_nome_dirigente', ''),
  );
  
  switch($key) {
    case 'notifica':
      $message['subject'] = @t('Notifica di istanza evasa (@nomesito)', $variables, $options);
      $message['body'][] = @t("Gentile @nome,", $variables, $options);
      $message['body'][] = @t(variable_get('supporto_istanze_notification_body', "La sua istanza @istanza, n. @istanza_id del @data, è stata @esito."), $variables, $options);
      if ($params['is_ok'] == 2) {
        $message['body'][] = @t("Motivazioni: @motivazioni", $variables, $options);
      }
      $message['body'][] = @t(variable_get('supporto_istanze_notification_footer', "Cordiali saluti,\nil Dirigente."), $variables, $options);
      break;
    case 'segreteria':
      $message['subject'] = @t('Notifica di istanza evasa (@nomesito)', $variables, $options);
      $message['body'][] = @t("All'attenzione della segreteria,");
      $message['body'][] = @t(variable_get('supporto_istanze_segreteria_body', "L'istanza @istanza, n. @istanza_id del @data presentata da @nome, è stata @esito."), $variables, $options);
      if ($params['is_ok'] == 2) {
        $message['body'][] = @t("Motivazioni: @motivazioni", $variables, $options);
      }
      $message['body'][] = @t(variable_get('supporto_istanze_notification_footer', "Cordiali saluti,\nil Dirigente."), $variables, $options);
      break;
  }
}
  
function supporto_istanze_reasons_form_submit($form, &$form_state) {
  $evaso = FALSE;
  //dsm('form_state='.$form_state['#action'].'<br>'.'form='.$form['#action']);
  $input = $form_state['values'];
  if (!($input['realfield'] == 'concedibile' && $input['is_ok'] == 1)) {
    $evaso = TRUE;
    $myfields = array(
      $input['field'] . '_stato' => $input['is_ok'],
      'evaso_data' => time(),
      'motivazioni' => $input['reasons'],
    );
  } else {
    $myfields = array(
      $input['field'] . '_stato' => $input['is_ok'],
      'evaso_data' => NULL,
      'motivazioni' => $input['reasons'],
    );
  }
  db_update('supporto_istanze')
  ->fields($myfields)
  ->condition('tid', $input['tid'])
  ->execute();
  drupal_set_message('Salvato campo istanza <em>' . $input['submission'] . '</em>.');
  if ($evaso) {
    _supporto_istanze_email($input);
  }
}

function supporto_istanze_reasons_form($form, &$form_state, $campo) {
  $tid = arg(5);
  $sid = arg(3);
  $result = db_query('SELECT * FROM {supporto_istanze} WHERE tid = :tid', array(':tid' => $tid));
  if ($result->rowCount() == 0) {
    drupal_set_message('Dati non trovati', 'warning');
  }
  $data = $result->fetchAssoc();
  $uid = $data['user_id'];
  $checked = $data[($campo == 'acquisito' ? 'concedibile' : $campo) . '_stato'];
  $reasons = $data['motivazioni'];

  $form['tid'] = array(
    '#type' => 'value',
    '#name' => 'tid',
    '#value' => $tid,
  );
  $form['uid'] = array(
    '#type' => 'value',
    '#name' => 'uid',
    '#value' => $uid,
  );
  $form['submission'] = array(
    '#type' => 'value',
    '#name' => 'submission',
    '#value' => $sid,
  );
  $form['field'] = array(
    '#type' => 'value',
    '#name' => 'field',
    '#value' => $campo == 'acquisito' ? 'concedibile' : $campo,
  );
  $form['realfield'] = array(
    '#type' => 'value',
    '#name' => 'realfield',
    '#value' => $campo,
  );
  switch ($campo) {
    case 'acquisito':
    $form['is_ok'] = array(
      '#type' => 'radios',
      '#title' => 'acquisisci o respingi:',
      '#options' => array(
        1 => 'Acquisisci istanza',
        2 => 'Respingi istanza',
      ),
      '#default_value' => $checked? $checked : 1,
      '#attributes' => array(
        'title' => 'Selezionare per cambiare lo stato',
      ),
    );
    break;
    case 'visto':
    $form['is_ok'] = array(
      '#type' => 'radios',
      '#title' => 'Concedi o respingi:',
      '#options' => array(
        1 => 'Si concede',
        2 => 'Non si concede',
      ),
      '#default_value' => $checked? $checked : 1,
      '#attributes' => array(
        'title' => 'Selezionare per cambiare lo stato',
      ),
    );
    break;
    case 'concedibile':
    $form['is_ok'] = array(
      '#type' => 'radios',
      '#title' => 'Valuta istanza:',
      '#options' => array(
        1 => 'Istanza concedibile',
        2 => 'Istanza non concedibile',
      ),
      '#default_value' => $checked? $checked : 1,
      '#attributes' => array(
        'title' => 'Selezionare per cambiare lo stato',
      ),
    );
    break;
  }
  $form['reasons'] = array(
    '#name' => 'reasons',
    '#type' => 'textarea',
    '#title' => 'motivazioni, in caso di istanza respinta:',
    '#default_value' => $reasons,
    '#element_validate' => array('_supporto_istanze_textarea_validate'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Salva',
  );
  return $form;
}

function _supporto_istanze_textarea_validate($element, &$form_state, $form) {
  if (empty($element['#value']) && $form_state['input']['is_ok'] == 2) {
    form_error($element, 'Campo richiesto per istanza respinta.');
  }
}

function _supporto_istanze_delete_instances($input) {
  db_delete('supporto_istanze')
    ->condition('submission_id', $input['submission'])
    ->execute();  
}

function _supporto_istanze_save_selection($input, $message = TRUE) {
  if ($input['tid'] == 0) {
    $id = db_insert('supporto_istanze')
    ->fields(array(
      'user_id' => $input['user'],
      'submission_id' => $input['submission'],
      $input['field'] . '_stato' => $input['is_ok'],
      'evaso_data' => ($input['field'] == 'protocollo' || ($input['field'] == 'concedibile' && $input['is_ok'] < 2)) ? NULL : time(),
      ))
    ->execute();
  } else {
    db_update('supporto_istanze')
    ->fields(array(
      'user_id' => $input['user'],
      'submission_id' => $input['submission'],
      $input['field'] . '_stato' => $input['is_ok'],
      'evaso_data' => ($input['field'] == 'protocollo' || ($input['field'] == 'concedibile' && $input['is_ok'] < 2)) ? NULL : time(),
      ))
    ->condition('tid', $input['tid'])
    ->execute();
  }
  if ($message) {
    drupal_set_message('Salvato campo <em>'. $input['field'] . '</em> istanza <em>' . $input['submission'] . '</em>');
  }
}

function supporto_istanze_admin_paths() {
  $paths = array(
    'node/*/submission/*/istanza_acquisisci/*' => TRUE,
    'node/*/submission/*/istanza_concedi/*' => TRUE,
    'node/*/submission/*/istanza_visto/*' => TRUE,
  );
  return $paths;
} 

/**
 * Implements hook_admin_paths_alter().
 */
function supporto_istanze_admin_paths_alter(&$paths) {
    $paths['node/%node/submission/%/istanza_acquisisci/%'] = TRUE;
    $paths['node/%node/submission/%/istanza_concedi/%'] = TRUE;
    $paths['node/%node/submission/%/istanza_visto/%'] = TRUE;
}

/**
 * check if $form_id is this module compliant
 *
 * @param string $form_id
 * @return boolean (TRUE if compliant)
 */
function _supporto_istanze_check_formid($form_id) {
  $apply_to = variable_get('supporto_istanze_node_types', array('article' => 'article'));

  foreach ($apply_to as $key => $value) {
    if ($key === $value && $key . '_node_form' === $form_id) {
      return TRUE;
    }
  }
  return FALSE;
}  

/**
 * Implements hook_form_alter().  
 */
function supporto_istanze_form_alter(&$form, &$form_state, $form_id) {
  if (_supporto_istanze_check_formid($form_id)) {
    if (arg(0) == 'node' && arg(1) == 'add') {
      $form['field_si_email'][LANGUAGE_NONE]['#default_value'] = variable_get('supporto_istanze_notification_email', FALSE);
    }
  }
}

function supporto_istanze_menu() {
  $items = array();

  $items['admin/config/system/supporto_istanze'] = array(
    'title' => 'Supporto istanze',
    'description' => 'Modulo di supporto a "Istanze on line" (Porte Aperte sul Web)',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('supporto_istanze_admin_settings_form'),
    'access arguments' => array('amministra istanze'),
    'file' => 'supporto_istanze.admin.inc',
  );

  $items['node/%node/submission/%/istanza_acquisisci/%'] = array(
    'title' => 'Acquisisci istanza',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('supporto_istanze_reasons_form','acquisito'),
    'access arguments' => array('acquisito'),
    'weight' => 2,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['node/%node/submission/%/istanza_concedi/%'] = array(
    'title' => 'Concedi istanza',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('supporto_istanze_reasons_form','concedibile'),
    'access arguments' => array('acquisito'),
    'weight' => 2,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['node/%node/submission/%/istanza_visto/%'] = array(
    'title' => 'Concedi istanza',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('supporto_istanze_reasons_form','visto'),
    'access arguments' => array('visto'),
    'weight' => 2,
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function _supporto_istanze_applies_to_bundle($nodetype, $apply_to = NULL) {
  if (!$apply_to) {
    $apply_to = variable_get('supporto_istanze_node_types', array('istanze_del_personale' => 'istanze_del_personale'));
  }

  // Check if key exists.
  if (!(in_array($nodetype, array_keys($apply_to)))) {
    return FALSE;
  }

  // Check if current node type is checked.
  return ($apply_to[$nodetype] === $nodetype);
}

function _supporto_istanze_reset_field($fieldname, $label, $description, $form = NULL) {
  //$fieldname = 'field_si_acquisisci';
  // Check if our field is not already created.
  if (!field_info_field($fieldname)) {
    $field = array(
      'field_name' => $fieldname, 
      'type'       => 'list_boolean',
      'cardinality' => 1,
      'settings'    => array(
        'allowed_values' => array( 
          0 => '',
          1 => '',
        ),
      ),
    );
    field_create_field($field);
  }
  if ($form) {
    $apply_to = $form['supporto_istanze_content1']['supporto_istanze_node_types']['#value'];
  }
  else {
    $apply_to = variable_get('supporto_istanze_node_types', array('istanze_del_personale' => 'istanze_del_personale'));
  }
  $node_types = node_type_get_types();
  foreach ($node_types as $node_type) {
    $bundle = $node_type->type;
    if (!_supporto_istanze_applies_to_bundle($bundle, $apply_to)) {
      if ($exists = field_info_instance('node', $fieldname, $bundle)) {
        field_delete_instance($exists, FALSE);
      }
      continue;
    }
    $instance = field_info_instance('node', $fieldname, $bundle);
    $default = FALSE; //$fieldname == 'field_si_email' ? variable_get('supporto_istanze_notification_email', FALSE) : FALSE;
    if (!($instance)) {
      $instance = array(
        'field_name' => $fieldname, 
        'entity_type' => 'node', 
        'label' => $label, //'Acquisisci soltanto, senza visto del DS',
        'description' => $description, //'Questo campo serve per attivare la modalità acquisisci.',
//        'type' => 'list_boolean', 
        'bundle' => $bundle, 
        'default_value' => $default,
        'widget'      => array(
          'type'     => 'options_onoff',
          'settings' => array(
            'display_label' => 1,
            'default_value' => $default,
          ),
        ),
      );
      field_create_instance($instance);
//    } else {
//      $instance['default_value'] = $default;
//      $instance['widget']['settings']['default_value'] = $default;
//      field_update_instance($instance);
    }
  }
}

function _supporto_istanze_acquisisci_reset_field($form = NULL) {
  _supporto_istanze_reset_field('field_si_acquisisci', 'Acquisisci soltanto, senza visto del DS', 'Questo campo serve per attivare la modalità acquisisci.', $form);
}

function _supporto_istanze_email_segr_reset_field($form = NULL) {
  _supporto_istanze_reset_field('field_si_email', 'Email di istanza evasa alla segreteria', 'Questo campo serve per inviare anche alla segreteria una email d istanza evasa.', $form);
}

function _supporto_istanze_reset_fields($form = NULL) {
  _supporto_istanze_acquisisci_reset_field($form);
  _supporto_istanze_email_segr_reset_field($form);
}
